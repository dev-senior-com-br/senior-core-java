/*
 * Autenticação
 * Responsável pela autenticação na plataforma G7.
 *
 * OpenAPI spec version: 4.24.0
 * Contact: seniorx-dev@senior.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package br.com.senior.core.authentication.pojos;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import br.com.senior.core.authentication.pojos.LoginMFAInfo;
import br.com.senior.core.authentication.pojos.ResetPasswordInfo;
import java.io.IOException;

/**
 * InlineResponse2002
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-13T19:09:13.383Z")



public class InlineResponse2002 {
  @SerializedName("jsonToken")
  private String jsonToken = null;

  @SerializedName("mfaInfo")
  private LoginMFAInfo mfaInfo = null;

  @SerializedName("resetPasswordInfo")
  private ResetPasswordInfo resetPasswordInfo = null;

  public InlineResponse2002 jsonToken(String jsonToken) {
    this.jsonToken = jsonToken;
    return this;
  }

   /**
   * String contendo um json com os tokens de acesso, de refresh, o tempo de validade restante para o token de acesso e o nome do usuário.&amp;#10;                Se o usuário/tenant estiver configurado para usar autenticação multifator, esse token não será retornado. Ao invés disso, será retornado um token temporário, dentro do &amp;#39;mfaInfo&amp;#39;, que&amp;#10;                deverá ser enviado na primitiva loginMFA.
   * @return jsonToken
  **/
  @ApiModelProperty(value = "String contendo um json com os tokens de acesso, de refresh, o tempo de validade restante para o token de acesso e o nome do usuário.&#10;                Se o usuário/tenant estiver configurado para usar autenticação multifator, esse token não será retornado. Ao invés disso, será retornado um token temporário, dentro do &#39;mfaInfo&#39;, que&#10;                deverá ser enviado na primitiva loginMFA.")
  public String getJsonToken() {
    return jsonToken;
  }

  public void setJsonToken(String jsonToken) {
    this.jsonToken = jsonToken;
  }

  public InlineResponse2002 mfaInfo(LoginMFAInfo mfaInfo) {
    this.mfaInfo = mfaInfo;
    return this;
  }

   /**
   * Get mfaInfo
   * @return mfaInfo
  **/
  @ApiModelProperty(value = "")
  public LoginMFAInfo getMfaInfo() {
    return mfaInfo;
  }

  public void setMfaInfo(LoginMFAInfo mfaInfo) {
    this.mfaInfo = mfaInfo;
  }

  public InlineResponse2002 resetPasswordInfo(ResetPasswordInfo resetPasswordInfo) {
    this.resetPasswordInfo = resetPasswordInfo;
    return this;
  }

   /**
   * Get resetPasswordInfo
   * @return resetPasswordInfo
  **/
  @ApiModelProperty(value = "")
  public ResetPasswordInfo getResetPasswordInfo() {
    return resetPasswordInfo;
  }

  public void setResetPasswordInfo(ResetPasswordInfo resetPasswordInfo) {
    this.resetPasswordInfo = resetPasswordInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2002 inlineResponse2002 = (InlineResponse2002) o;
    return Objects.equals(this.jsonToken, inlineResponse2002.jsonToken) &&
        Objects.equals(this.mfaInfo, inlineResponse2002.mfaInfo) &&
        Objects.equals(this.resetPasswordInfo, inlineResponse2002.resetPasswordInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jsonToken, mfaInfo, resetPasswordInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2002 {\n");
    
    sb.append("    jsonToken: ").append(toIndentedString(jsonToken)).append("\n");
    sb.append("    mfaInfo: ").append(toIndentedString(mfaInfo)).append("\n");
    sb.append("    resetPasswordInfo: ").append(toIndentedString(resetPasswordInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

