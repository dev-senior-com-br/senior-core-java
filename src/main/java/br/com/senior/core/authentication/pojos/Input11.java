/*
 * Autenticação
 * Responsável pela autenticação na plataforma G7.
 *
 * OpenAPI spec version: 4.24.0
 * Contact: seniorx-dev@senior.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package br.com.senior.core.authentication.pojos;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Input11
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-13T19:09:13.383Z")



public class Input11 {
  @SerializedName("previousToken")
  private String previousToken = null;

  @SerializedName("tokenExpiration")
  private Integer tokenExpiration = null;

  @SerializedName("loginDateTime")
  private String loginDateTime = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("refreshToken")
  private String refreshToken = null;

  public Input11 previousToken(String previousToken) {
    this.previousToken = previousToken;
    return this;
  }

   /**
   * Token anterior do usuário
   * @return previousToken
  **/
  @ApiModelProperty(required = true, value = "Token anterior do usuário")
  public String getPreviousToken() {
    return previousToken;
  }

  public void setPreviousToken(String previousToken) {
    this.previousToken = previousToken;
  }

  public Input11 tokenExpiration(Integer tokenExpiration) {
    this.tokenExpiration = tokenExpiration;
    return this;
  }

   /**
   * Tempo para expirar o token em segundos
   * @return tokenExpiration
  **/
  @ApiModelProperty(required = true, value = "Tempo para expirar o token em segundos")
  public Integer getTokenExpiration() {
    return tokenExpiration;
  }

  public void setTokenExpiration(Integer tokenExpiration) {
    this.tokenExpiration = tokenExpiration;
  }

  public Input11 loginDateTime(String loginDateTime) {
    this.loginDateTime = loginDateTime;
    return this;
  }

   /**
   * Data e hora do login
   * @return loginDateTime
  **/
  @ApiModelProperty(required = true, value = "Data e hora do login")
  public String getLoginDateTime() {
    return loginDateTime;
  }

  public void setLoginDateTime(String loginDateTime) {
    this.loginDateTime = loginDateTime;
  }

  public Input11 username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Nome do usuário do qual o token foi atualizado
   * @return username
  **/
  @ApiModelProperty(required = true, value = "Nome do usuário do qual o token foi atualizado")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public Input11 refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * Novo token para refresh
   * @return refreshToken
  **/
  @ApiModelProperty(required = true, value = "Novo token para refresh")
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Input11 input11 = (Input11) o;
    return Objects.equals(this.previousToken, input11.previousToken) &&
        Objects.equals(this.tokenExpiration, input11.tokenExpiration) &&
        Objects.equals(this.loginDateTime, input11.loginDateTime) &&
        Objects.equals(this.username, input11.username) &&
        Objects.equals(this.refreshToken, input11.refreshToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(previousToken, tokenExpiration, loginDateTime, username, refreshToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Input11 {\n");
    
    sb.append("    previousToken: ").append(toIndentedString(previousToken)).append("\n");
    sb.append("    tokenExpiration: ").append(toIndentedString(tokenExpiration)).append("\n");
    sb.append("    loginDateTime: ").append(toIndentedString(loginDateTime)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

