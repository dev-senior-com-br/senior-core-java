/*
 * Autenticação
 * Responsável pela autenticação na plataforma G7.
 *
 * OpenAPI spec version: 4.24.0
 * Contact: seniorx-dev@senior.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package br.com.senior.core.authentication.pojos;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Input4
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-13T19:09:13.383Z")



public class Input4 {
  @SerializedName("password")
  private String password = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("scope")
  private String scope = null;

  @SerializedName("username")
  private String username = null;

  public Input4 password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Senha do usuário. Este campo deve ser informado se o login for baseado em um usuário e senha.
   * @return password
  **/
  @ApiModelProperty(value = "Senha do usuário. Este campo deve ser informado se o login for baseado em um usuário e senha.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Input4 code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Código de autorização do provedor externo de autenticação. Provedores suportados: SAML.&amp;#10;                 Este campo deve ser informado se o login for baseado em um código de autorização.
   * @return code
  **/
  @ApiModelProperty(value = "Código de autorização do provedor externo de autenticação. Provedores suportados: SAML.&#10;                 Este campo deve ser informado se o login for baseado em um código de autorização.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Input4 scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Escopo do token da autenticação. Opcional, se não for informado será usado o valor padrão &amp;#39;desktop&amp;#39;
   * @return scope
  **/
  @ApiModelProperty(value = "Escopo do token da autenticação. Opcional, se não for informado será usado o valor padrão &#39;desktop&#39;")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public Input4 username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Nome do usuário incluindo o domínio. Exemplo: ana.silva@senior.com.br.&amp;#10;                Este campo deve ser informado se o login for baseado em um usuário e senha.
   * @return username
  **/
  @ApiModelProperty(value = "Nome do usuário incluindo o domínio. Exemplo: ana.silva@senior.com.br.&#10;                Este campo deve ser informado se o login for baseado em um usuário e senha.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Input4 input4 = (Input4) o;
    return Objects.equals(this.password, input4.password) &&
        Objects.equals(this.code, input4.code) &&
        Objects.equals(this.scope, input4.scope) &&
        Objects.equals(this.username, input4.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, code, scope, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Input4 {\n");
    
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

